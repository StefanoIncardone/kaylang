{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Kay",
    "fileTypes": [".kay"],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#characters"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#raw_strings"
        },
        {
            "include": "#integers"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#type_annotation"
        },
        {
            "include": "#non_ascii"
        }
    ],
    "repository": {
        "comments": {
            "name": "comment.line.number-sign.kay",
            "begin": "#",
            "end": "\n"
        },

        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.kay",
                    "match": "\\b(?:do|if|else|loop|break|continue)\\b"
                },
                {
                    "name": "keyword.operator.new.kay",
                    "match": "\\b(?:len)\\b"
                },
                {
                    "name": "storage.modifier.kay",
                    "match": "\\b(?:let|var)\\b"
                },
                {
                    "name": "constant.language.kay",
                    "match": "\\b(?:true|false)\\b"
                },
                {
                    "name": "support.function.kay",
                    "match": "\\b(?:print|println|eprint|eprintln)\\b"
                }
            ]
        },

        "escapes": {
            "patterns": [
                {
                    "name": "constant.character.escape.kay",
                    "match": "(?:\\\\{2}|\\\\'|\\\\\"|\\\\n|\\\\r|\\\\t|\\\\0)"
                },
                {
                    "name": "invalid.illegal.kay",
                    "match": "(?:\\\\.)"
                }
            ]
        },
        "characters": {
            "name": "string.quoted.single.kay",
            "patterns": [
                {
                    "name": "invalid.illegal.kay",
                    "match": "''"
                },
                {
                    "name": "string.quoted.double.kay",
                    "match": "'(?:(\\\\{2})*|(.*?[^\\\\](?:\\\\{2})*))'",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#escapes"
                                },
                                {
                                    "include": "#non_ascii"
                                }
                            ]
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "#escapes"
                                },
                                {
                                    "include": "#non_ascii"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "invalid.illegal.kay",
                    "match": "'(\\\\.|.)?",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#non_ascii"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.kay",
            "patterns": [
                {
                    "name": "string.quoted.double.kay",
                    "match": "\"(?:(\\\\{2})*|(.*?[^\\\\](?:\\\\{2})*))\"",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#escapes"
                                },
                                {
                                    "include": "#non_ascii"
                                }
                            ]
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "#escapes"
                                },
                                {
                                    "include": "#non_ascii"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "invalid.illegal.kay",
                    "match": "\"(.*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#non_ascii"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "raw_strings": {
            "name": "string.quoted.other.kay",
            "patterns": [
                {
                    "name": "string.quoted.other.kay",
                    "match": "(r)\"(.*?)\"",
                    "captures": {
                        "1": {
                            "name": "markup.changed.kay"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "#non_ascii"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "invalid.illegal.kay",
                    "match": "(r)\"(.*)",
                    "captures": {
                        "1": {
                            "name": "markup.changed.kay"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "#non_ascii"
                                }
                            ]
                        }
                    }
                }
            ]
        },

        "integers": {
            "name": "constant.numeric.kay",
            "patterns": [
                {
                    "name": "constant.numeric.kay",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "invalid.illegal.kay",
                    "match": "\\d+[_A-Za-z\\d]*"
                }
            ]
        },

        "non_ascii": {
            "name": "invalid.illegal.kay",
            "match": "[^\\x20-\\x7E]"
        },

        "variables": {
            "name": "variable.name.kay",
            "match": "[_A-Za-z][_A-Za-z\\d]*",
            "patterns": [
                {
                    "include": "#non_ascii"
                }
            ]
        },
        "type_annotation": {
            "name": "meta.type.annotation.kay",
            "match": ": *?([_A-Za-z][_A-Za-z\\d]*)(?:\\[(\\d+?)\\]|(\\[ *?\\]))?",
            "captures": {
                "1": {
                    "name": "support.type.kay"
                },
                "2": {
                    "name": "constant.numeric.kay"
                },
                "3": {
                    "name": "invalid.illegal.kay"
                }
            },
            "patterns": [
                {
                    "include": "#non_ascii"
                }
            ]
        }
    },
    "scopeName": "source.kay"
}
