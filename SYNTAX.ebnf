ASCII_character = ? ASCII 32..126 ?;
UTF-8_character = ? U+0080.. ?;

line_comment      = "#", [{ASCII_character | UTF-8_character}];
digit             = "0".."9";
number_literal    = {digit};
boolean_literal   = "true" | "false";
escape_character  = "\\" | "\'" | '\"' | '"' | "\n" | "\r" | "\t" | "\0";
character_literal = "'", (escape_character | ASCII_character), "'";
string_literal    = '"', [{escape_character | ASCII_character}], '"';
identifier        = "_" | "A".."Z" | "a".."z", [{"_" | "A".."Z" | "a".."z" | digit}];

(* expressions must be of the same type *)
array       = "[", [{expression}], "]";
array_index = identifier, "[", integer_expression, "]";

(* from highest precedence to lowest *)
int_factor                = ["-" | "!"], (number_literal | character_literal | identifier | ("(", integer_expression, ")"));
boolean_factor            = ["!"], (boolean_literal | identifier | ("(", boolean_expression, ")"));

primary_expression        = int_factor | boolean_factor | character_literal | ("(", expression, ")");
exponentiative_expression = primary_expression, ["**", primary_expression];
multiplicative_expression = boolean_literal, [("*" | "/" | "%"), boolean_literal];
additive_expression       = multiplicative_expression, [("+" | "-"), multiplicative_expression];
shift_expression          = additive_expression, [("<<" | ">>"), additive_expression];
bitand_expression         = shift_expression, ["&", shift_expression];
bitxor_expression         = bitand_expression, ["^", bitand_expression];
bitor_expression          = bitxor_expression, ["|", bitxor_expression];
comparative_expression    = bitor_expression, ["<=>", bitor_expression];
(* comparison expressions cannot be chained*)
comparison_expression     = comparative_expression, [("==" | "!=" | ">" | ">=" | "<" | "<="), comparative_expression];
and_expression            = comparison_expression, ["&&", comparison_expression];
or_expression             = and_expression, ["||", and_expression];

boolean_expression        = or_expression;
integer_expression        = bitor_expression;
string_expression         = string_literal;
expression                = boolean_expression | integer_expression | string_expression | array | array_index;

type = identifier;
variable_declaration =
    ("let" | "var"), identifier, (
        (":", type)                       (* type-specific default initialization *)
        | ([":", type], "=", expression)  (* regular declaration (explicit/inferred type)*)
    ),
    ";";

variable_reassignment =
    identifier,
    ("=" | "**=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" | "&&=" | "^^=" | "||="),
    expression, ";";

print = (("print", expression) | ("println", [expression])), ";";
if    = "if", boolean_expression, (("do", statement, ";") | scope), [{"else", (if | ("do", statement, ";") | scope)}];
loop  = ["do"], "loop", boolean_expression, (("do", statement, ";") | scope);

statement = expression | print | variable_declaration | variable_reassignment | if | loop;
scope     = "{", [{line_comment | statement | scope}], "}";
