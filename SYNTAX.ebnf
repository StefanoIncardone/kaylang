ASCII_character = ? ASCII 32..126 ?;
UTF-8_character = ? U+0080.. ?;
line_comment = "#", [{ASCII_character | UTF-8_character}];

digit = "0".."9";
number_literal = {digit};
boolean_literal = "true" | "false";

escape_character = "\\" | "\'" | '\"' | '"' | "\n" | "\r" | "\t" | "\0";
character_literal = "'", (escape_character | ASCII_character), "'";
string_literal = '"', [{escape_character | ASCII_character}], '"';
identifier = "_" | "A".."Z" | "a".."z", [{"_" | "A".."Z" | "a".."z" | digit}];

(* from highest precedence to lowest *)
int_factor = ["-"], (number_literal | ? identifier to non boolean value ? | character_literal | string_literal | ("(", non_boolean_expression, ")"));
boolean_factor = ["!"], ? identifier to boolean value ? | boolean_literal | ("(", boolean_expression, ")");

factor = int_factor | boolean_factor | character_literal | string_literal;
exponentiation = factor, ["**", factor];
multiplicative_expression = exponentiation, [("*" | "/" | "%"), exponentiation];
additive_expression = multiplicative_expression, [("+" | "-"), multiplicative_expression];
comparative_expression = additive_expression, [("==" | "!=" | ">" | ">=" | "<" | "<=" | "<=>"), additive_expression];
boolean_comparative_expression = comparative_expression, ("==" | "!=" | ">" | ">=" | "<" | "<="), comparative_expression;
boolean_expression = boolean_comparative_expression, ("&&" | "||" | "^^"), boolean_comparative_expression;
non_boolean_expression = additive_expression, [("<=>"), additive_expression];
expression = comparative_expression | boolean_expression | non_boolean_expression;

print = (("print", expression) | ("println", [expression])), ";";
variable_declaration = ("let" | "var"), identifier, ("=" | "**=" | "*=" | "/=" | "%=" | "+=" | "-=" ), expression, ";";
variable_reassignment = identifier, "=", expression, ";";
if = "if", boolean_expression, ((":", statement, ";") | scope), [{"else", (if | (":", statement, ";") | scope)}];
for = "for", boolean_expression, ((":", statement, ";") | scope);

statement = expression | print | variable_declaration | variable_reassignment | if | for;
scope = "{", [{line_comment | statement | scope}], "}";
program = [{line_comment | statement | scope}];
