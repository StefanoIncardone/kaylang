ASCII_character = ? ASCII 32..126 ?;
UTF-8_character = ? U+0080.. ?;

line_comment = "#", [{ASCII_character | UTF-8_character}];

digit             = "0".."9";
integer_literal   = digit, [{digit | "_"}];
boolean_literal   = "true" | "false";
escapes           = "\\" | "\'" | '\"' | "\n" | "\r" | "\t" | "\0";
character_literal = "'", (ASCII_character | escapes), "'";
string_literal    = ["r"], '"', [{ASCII_character | escapes}], '"';
identifier        = "_" | "A".."Z" | "a".."z", [{"_" | "A".."Z" | "a".."z" | digit}];

operator_len               = "len";
operator_equals            = "=";
operator_not               = "!";
operator_pow               = "**" | "**\" | "**|";
operator_times             = "*" | "*\" | "*|";
operator_divide            = "/" | "/\" | "/|";
operator_remainder         = "%";
operator_plus              = "+" | "+\" | "+|" ;
operator_minus             = "-" | "-\" | "-|" ;
operator_and               = "&&";
operator_bitand            = "&";
operator_or                = "||";
operator_bitor             = "|";
operator_bitxor            = "^";
operator_leftshift         = "<<" | "<<\" | "<<|";
operator_rightshift        = ">>";
operator_leftrotate        = "<<<";
operator_rightrotate       = ">>>";
operator_equalsequals      = "==";
operator_notequals         = "==";
operator_greater           = ">";
operator_greater_or_equals = ">=";
operator_less              = "<";
operator_less_or_equals    = "<=";
operator_compare           = "<=>";

comparison_operator =
    operator_compare
    | operator_equalsequals
    | operator_notequals
    | operator_greater
    | operator_greater_or_equals
    | operator_less
    | operator_less_or_equals
    ;

unary_operator = operator_len | operator_not | operator_plus | operator_minus;
binary_operator =
    operator_pow
    | operator_times
    | operator_divide
    | operator_remainder
    | operator_plus
    | operator_minus
    | operator_and
    | operator_bitand
    | operator_or
    | operator_bitor
    | operator_bitxor
    | operator_leftshift
    | operator_rightshift
    | operator_leftrotate
    | operator_rightrotate
    | comparison_operator
    ;

assignment_operator = "=" | "**=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" | "&&=" | "||=";

(* expressions must be of the same type *)
array          = "[", expression, ",", expression, [{(",", expression)}], [","], "]";
array_variable = identifier;
array_index    = array_variable, "[", integer_expression, "]";

(* from highest precedence to lowest *)
int_factor       = [unary_operator], (integer_literal | character_literal | identifier | ("(", integer_expression, ")") | array_index);
boolean_factor   = [operator_not], (boolean_literal | identifier | ("(", boolean_expression, ")") | array_index);
character_factor = character_literal | ((identifier | array_index), "[", integer_expression, "]");

primary_expression        = int_factor | boolean_factor | character_factor | array_index | ("(", expression, ")");
exponentiative_expression = primary_expression, [operator_pow, primary_expression];
multiplicative_expression = boolean_literal, [(operator_times | operator_divide | operator_remainder), boolean_literal];
additive_expression       = multiplicative_expression, [(operator_plus | operator_minus), multiplicative_expression];
shift_expression          = additive_expression, [(operator_rightshift | operator_rightrotate | operator_leftshift | operator_leftrotate), additive_expression];
bitand_expression         = shift_expression, [operator_bitand, shift_expression];
bitxor_expression         = bitand_expression, [operator_bitxor, bitand_expression];
bitor_expression          = bitxor_expression, [operator_bitor, bitxor_expression];
(* comparison and boolean expressions cannot be chained *)
comparison_expression     = bitor_expression, [comparison_operator, bitor_expression];
and_expression            = comparison_expression, [operator_and, comparison_expression];
or_expression             = and_expression, [operator_or, and_expression];
boolean_expression        = or_expression;
integer_expression        = bitor_expression;
string_expression         = string_literal, comparison_operator, string_literal;
array_expression          = array_variable, comparison_operator, array_variable;
expression                = boolean_expression | integer_expression | string_literal | string_expression | array  | array_expression;

type = identifier | (identifier, "[", integer_literal, "]");
variable_declaration = ("let" | "var"), identifier, [[":", type], "=", expression], ";";
variable_reassignment = (identifier | array_index), assignment_operator, expression, ";";

if =
    "if", boolean_expression, (("do", statement, ";") | scope),
    [{"else", ("if", boolean_expression, (("do", statement, ";") | scope))}],
    ["else", (("do", statement, ";") | scope)]
    ;
loop  = ["do"], "loop", boolean_expression, (("do", statement_in_loop, ";") | scope);
print = (("print", expression) | ("println", [expression]) | ("eprint", expression) | ("eprintln", [expression])), ";";
statement = expression | print | variable_declaration | variable_reassignment | if | loop;
statement_in_loop = expression | print | variable_declaration | variable_reassignment | if | loop | "break" | "continue";
scope     = "{", [{line_comment | statement | scope}], "}";
